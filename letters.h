#ifndef LETTERS_H_INCLUDED
#define LETTERS_H_INCLUDED

#include <windows.h>

#define COL 7
#define ROW 13

void AAD();
void selector(char a[]);
void copier(int letter[ROW][COL],int assigned[ROW][COL]);

int num;
int A[ROW][COL]={{0,0,1,1,1,0,0},{0,1,1,1,1,1,0},{1,1,1,1,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1}};
int B[ROW][COL]={{1,1,1,1,0,0,0},{1,1,1,1,1,0,0},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,1,1,1,0},{1,1,1,1,1,0,0},{1,1,1,1,1,1,0},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,1,1,1,0},{1,1,1,1,0,0,0}};
int C[ROW][COL]={{0,0,1,1,1,0,0},{0,1,1,1,1,1,0},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{0,1,1,1,1,1,0},{0,0,1,1,1,0,0}};
int D[ROW][COL]={{1,1,1,1,1,0,0},{1,1,1,1,1,1,0},{1,1,1,1,1,1,1},{0,1,1,0,1,1,1},{0,1,1,0,1,1,1},{0,1,1,0,1,1,1},{0,1,1,0,1,1,1},{0,1,1,0,1,1,1},{0,1,1,0,1,1,1},{0,1,1,0,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,0},{1,1,1,1,1,0,0}};
int E[ROW][COL]={{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,0,0,0,1},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,1,1,0},{1,1,1,1,1,1,0},{1,1,1,0,1,1,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1}};
int F[ROW][COL]={{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,0,0,0,1},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,1,1,0},{1,1,1,1,1,1,0},{1,1,1,0,1,1,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,1,0,0,0}};
int G[ROW][COL]={{0,0,1,1,1,0,0},{0,1,1,1,1,1,0},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,1,1,1},{1,1,1,0,0,1,1},{1,1,1,0,1,1,1},{1,1,1,1,1,1,1},{0,1,1,1,1,1,0},{0,0,1,1,1,0,0}};
int H[ROW][COL]={{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1}};
int I[ROW][COL]={{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,0,1,1,1,0,1},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{1,0,1,1,1,0,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1}};
int J[ROW][COL]={{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,0,1,1,1,0,1},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{1,0,1,1,1,0,0},{1,1,1,1,1,0,0},{1,1,1,1,1,0,0},{0,1,1,1,0,0,0}};
int K[ROW][COL]={{1,1,1,0,0,1,1},{1,1,1,0,0,1,1},{1,1,1,0,0,1,1},{1,1,1,0,1,1,0},{1,1,1,0,1,1,0},{1,1,1,0,1,0,0},{1,1,1,1,1,0,0},{1,1,1,1,1,1,0},{1,1,1,1,1,1,0},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,0,1,1}};
int L[ROW][COL]={{1,1,1,1,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,1,1},{1,1,1,0,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1}};
int M[ROW][COL]={{1,1,0,0,0,1,1},{1,1,1,0,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,0,1,0,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1}};
int N[ROW][COL]={{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{1,1,1,0,0,1,1},{1,1,1,0,0,1,1},{1,1,1,1,0,1,1},{1,1,1,1,0,1,1},{1,1,1,1,1,1,1},{1,1,0,1,1,1,1},{1,1,0,1,1,1,1},{1,1,0,0,1,1,1},{1,1,0,0,1,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1}};
int O[ROW][COL]={{0,0,1,1,1,0,0},{0,1,1,1,1,1,0},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{0,1,1,1,1,1,0},{0,0,1,1,1,0,0}};
int P[ROW][COL]={{1,1,1,1,1,0,0},{1,1,1,1,1,1,0},{1,1,1,0,1,1,1},{1,1,1,0,0,1,1},{1,1,1,0,0,1,1},{1,1,1,0,1,1,0},{1,1,1,1,1,0,0},{1,1,1,1,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,1,0,0,0}};
int Q[ROW][COL]={{0,0,1,1,1,0,0},{0,1,1,1,1,1,0},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,1,1,1,1},{1,1,1,0,1,1,1},{1,1,1,1,1,1,1},{0,1,1,1,1,1,0},{0,0,1,1,0,1,1}};
int R[ROW][COL]={{1,1,1,1,1,0,0},{1,1,1,1,1,1,0},{1,1,1,0,1,1,1},{1,1,1,0,0,1,1},{1,1,1,0,0,1,1},{1,1,1,0,1,1,0},{1,1,1,1,1,0,0},{1,1,1,1,0,0,0},{1,1,1,1,1,0,0},{1,1,1,0,1,1,0},{1,1,1,0,1,1,1},{1,1,1,0,0,1,1},{1,1,1,0,0,1,1}};
int S[ROW][COL]={{0,0,1,1,1,0,0},{0,1,1,1,1,1,0},{1,1,1,0,1,1,1},{1,1,1,0,0,1,1},{1,1,1,0,0,0,1},{0,1,1,1,0,0,0},{0,0,1,1,1,0,0},{0,0,0,1,1,1,0},{1,0,0,0,1,1,1},{1,1,0,0,1,1,1},{1,1,1,0,1,1,1},{0,1,1,1,1,1,0},{0,0,1,1,1,0,0}};
int T[ROW][COL]={{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,0,1,1,1,0,1},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,1,1,1,1,1,0}};
int U[ROW][COL]={{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{0,1,1,1,1,1,0}};
int V[ROW][COL]={{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{0,1,1,0,1,1,0},{0,1,1,1,1,1,0},{0,0,1,1,1,0,0},{0,0,0,1,0,0,0}};
int W[ROW][COL]={{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{1,1,0,1,0,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,0,1,1,1},{1,1,0,0,0,1,1}};
int X[ROW][COL]={{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{0,1,1,0,1,1,0},{0,1,1,1,1,1,0},{0,0,1,1,1,0,0},{0,1,1,1,1,1,0},{0,1,1,0,1,1,0},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1}};
int Y[ROW][COL]={{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{1,1,1,0,1,1,1},{0,1,1,0,1,1,0},{0,1,1,1,1,1,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0}};
int Z[ROW][COL]={{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,0,0,0,1,1,1},{0,0,0,0,1,1,1},{0,0,0,1,1,1,0},{0,0,0,1,1,1,0},{0,0,1,1,1,0,0},{0,1,1,1,0,0,0},{0,1,1,1,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1}};
int _space[ROW][COL]={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
int _unederscore[ROW][COL]={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1}};
int _dash[ROW][COL]={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
int _plus[ROW][COL]={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
int _fslash[ROW][COL]={{0,0,0,0,0,1,1},{0,0,0,0,1,1,1},{0,0,0,0,1,1,1},{0,0,0,1,1,1,0},{0,0,0,1,1,1,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,1,1,1,0,0,0},{0,1,1,1,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{1,1,0,0,0,0,0}};
int _bslash[ROW][COL]={{1,1,0,0,0,0,0},{1,1,1,0,0,0,0},{1,1,1,0,0,0,0},{0,1,1,1,0,0,0},{0,1,1,1,0,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,0,1,1,1,0},{0,0,0,1,1,1,0},{0,0,0,0,1,1,1},{0,0,0,0,1,1,1},{0,0,0,0,0,1,1}};
int _astrix[ROW][COL]={{0,1,0,1,0,1,0},{0,0,1,1,1,0,0},{0,1,1,1,1,1,0},{0,0,1,1,1,0,0},{0,1,0,1,0,1,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
int _period[ROW][COL]={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,1,1,1,1,0,0},{0,1,1,1,1,0,0},{0,1,1,1,1,0,0}};
int _comma[ROW][COL]={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,1,1,0,0,0,0}};
int _exclamation[ROW][COL]={{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,0,0,1,0,0,0},{0,0,0,0,0,0,0},{0,0,0,1,0,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0}};
int _qmark[ROW][COL]={{0,0,1,1,1,0,0},{0,1,1,1,1,1,0},{1,1,1,0,1,1,1},{1,1,0,0,0,1,1},{1,1,0,0,0,1,1},{0,0,0,0,1,1,1},{0,0,0,0,1,1,0},{0,0,0,1,1,0,0},{0,0,0,1,0,0,0},{0,0,0,0,0,0,0},{0,0,0,1,0,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0}};
int _equals[ROW][COL]={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{0,0,0,0,0,0,0},{1,1,1,1,1,1,1},{1,1,1,1,1,1,1},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
int _scolon[ROW][COL]={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,1,1,1,1,0,0},{0,1,1,1,1,0,0},{0,1,1,1,1,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,1,1,0,0,0,0}};
int _colon[ROW][COL]={{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,1,1,1,1,0,0},{0,1,1,1,1,0,0},{0,1,1,1,1,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,1,1,1,1,0,0},{0,1,1,1,1,0,0},{0,1,1,1,1,0,0}};
int _apostrophe[ROW][COL]={{0,0,1,1,1,0,0},{0,0,1,1,1,0,0},{0,1,1,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};
int _icomma[ROW][COL]={{0,1,1,0,1,1,0},{0,1,1,0,1,1,0},{1,0,0,1,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}};


void selector(char a[])
{
    int i,j,k,num=0;
    for (i=0; i<100; i++)
    {
        if (a[i]!='0')
            num++;
        else
            break;
    }
    int screen[num][ROW][COL];
    for (i=0; i<num; i++)
    {
        switch(a[i])
        {
        case 'A':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=A[j][k];
                }
            }
            break;
        case 'B':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=B[j][k];
                }
            }
            break;
        case 'C':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=C[j][k];
                }
            }
            break;
        case 'D':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=D[j][k];
                }
            }
            break;
        case 'E':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=E[j][k];
                }
            }
            break;
        case 'F':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=F[j][k];
                }
            }
            break;
        case 'G':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=G[j][k];
                }
            }
            break;
        case 'H':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=H[j][k];
                }
            }
            break;
        case 'I':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=I[j][k];
                }
            }
            break;
        case 'J':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=J[j][k];
                }
            }
            break;
        case 'K':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=K[j][k];
                }
            }
            break;
        case 'L':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=L[j][k];
                }
            }
            break;
        case 'M':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=M[j][k];
                }
            }
            break;
        case 'N':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=N[j][k];
                }
            }
            break;
        case 'O':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=O[j][k];
                }
            }
            break;
        case 'P':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=P[j][k];
                }
            }
            break;
        case 'Q':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=Q[j][k];
                }
            }
            break;
        case 'R':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=R[j][k];
                }
            }
            break;
        case 'S':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=S[j][k];
                }
            }
            break;
        case 'T':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=T[j][k];
                }
            }
            break;
        case 'U':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=U[j][k];
                }
            }
            break;
        case 'V':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=V[j][k];
                }
            }
            break;
        case 'W':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=W[j][k];
                }
            }
            break;
        case 'X':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=X[j][k];
                }
            }
            break;
        case 'Y':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=Y[j][k];
                }
            }
            break;
        case 'Z':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=Z[j][k];
                }
            }
            break;
        case ' ':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_space[j][k];
                }
            }
            break;
        case '_':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_unederscore[j][k];
                }
            }
            break;
        case '-':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_dash[j][k];
                }
            }
            break;
        case '+':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_plus[j][k];
                }
            }
            break;
        case '/':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_fslash[j][k];
                }
            }
            break;
        case '\\':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_bslash[j][k];
                }
            }
            break;
        case '*':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_astrix[j][k];
                }
            }
            break;
        case '.':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_period[j][k];
                }
            }
            break;
        case ',':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_comma[j][k];
                }
            }
            break;
        case '!':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_exclamation[j][k];
                }
            }
            break;
        case '?':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_qmark[j][k];
                }
            }
            break;
        case '=':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_equals[j][k];
                }
            }
            break;
        case ';':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_scolon[j][k];
                }
            }
            break;
        case ':':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_colon[j][k];
                }
            }
            break;
        case '\'':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_apostrophe[j][k];
                }
            }
            break;
        case '"':
            for (j=0; j<ROW; j++)
            {
                for (k=0; k<COL; k++)
                {
                    screen[i][j][k]=_icomma[j][k];
                }
            }
            break;

        default:
            printf("\ninvalid input");
            break;
        }
    }
    AAD(screen,num);
}

void AAD(int screen[3][ROW][COL], int num)
{
    printf("\nPrint in AAD\n\n");
    int i,j,k;
    for (j=0; j<ROW; j++)
    {
        for (i=0; i<num; i++)
        {
            for (k=0; k<COL; k++)
            {
                if (screen[i][j][k]==1)
                {
                    printf("*");
                    Sleep(5);
                }
                else
                    printf(" ");
            }
            printf("\t");
        }
        Sleep(50);
        printf("\n");
    }
}

/*
void copier(int letter[ROW][COL],int assigned[ROW][COL])
{
    int i,j;
    for (i=0; i<ROW; i++)
    {
        for (j=0; j<COL; j++)
        {
            letter[i][j]=assigned[i][j];
        }
    }
}
*/

#endif // LETTERS_H_INCLUDED
